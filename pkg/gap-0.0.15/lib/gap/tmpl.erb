God.watch do |w|
  w.name = "<%= "#{@part}_#{@app}" %>"
  w.group = "<%= "#{@app}"%>"
  w.interval = 15.minutes# default
  w.start = "<%= "#{@commands["start"]}"%>"
  w.stop = "<%= "#{@commands["stop"]}"%>"
  w.restart = "<%= "#{@commands["restart"]}"%>"
  <% if @commands["pid_file"] %>
    w.pid_file = "<%= "#{@commands["pid_file"]}" %>"
  <% end %>

  # clean pid files before start if necessary
  w.behavior(:clean_pid_file)

  # determine the state on startup
  w.transition(:init, { true => :up, false => :start }) do |on|
    on.condition(:process_running) do |c|
      c.running = true
    end
  end

  # determine when process has finished starting
  w.transition([:start, :restart], :up) do |on|
    on.condition(:process_running) do |c|
      c.running = true
    end

    # failsafe
    on.condition(:tries) do |c|
      c.times = 5
      c.transition = :start
      c.notify = {:contacts => 'Lv2'}
    end
  end

  # start if process is not running
  w.transition(:up, :start) do |on|
    on.condition(:process_running) do |c|
      c.running = false
      c.notify = {:contacts => ['Lv2','Lv3']} #Lv3
    end
  end

  # restart if memory or cpu is too high
  w.transition(:up, :restart) do |on|
    on.condition(:memory_usage) do |c|
      c.above = 1.gigabytes
      # c.times = [3, 5]
      c.notify = {:contacts => 'Lv2'} #'Lv3'
    end

    on.condition(:cpu_usage) do |c|
      c.above = 90.percent
      #  c.times = [3, 5]
      c.notify = {:contacts => 'Lv2'} #'Lv3'
    end
  end

  # lifecycle
  w.lifecycle do |on|
    on.condition(:flapping) do |c|
      c.to_state = [:start, :restart]
      c.times = 5
      c.within = 5.minute
      c.transition = :unmonitored
      c.retry_in = 10.minutes
      c.retry_times = 5
      c.retry_within = 2.hours
    end
  end
end
